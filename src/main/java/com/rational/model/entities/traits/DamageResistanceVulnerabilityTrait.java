package com.rational.model.entities.traits;

import com.rational.model.entities.CharacterModel;
import com.rational.model.entities.DamageType;
import com.rational.model.entities.TraitModel;
import com.rational.model.playing.Events.Damage;
import com.rational.model.playing.Event;

import javax.persistence.*;
import java.math.BigDecimal;

@Entity
@Table(name="damage_resistance_vulnerability_trait")
public class DamageResistanceVulnerabilityTrait extends TraitModel{

    @OneToOne(cascade = CascadeType.ALL) @JoinColumn(name="damage_resistance_id") private DamageType damageResistance;
    @OneToOne(cascade = CascadeType.ALL) @JoinColumn(name="damage_vulnerability_id") private DamageType damageVulnerability;

    public DamageType getDamageResistance() {
        return damageResistance;
    }

    public void setDamageResistance(DamageType damageResistance) {
        this.damageResistance = damageResistance;
    }

    public DamageType getDamageVulnerability() {
        return damageVulnerability;
    }

    public void setDamageVulnerability(DamageType damageVulnerability) {
        this.damageVulnerability = damageVulnerability;
    }

    @Override
    public void processTrait(CharacterModel character) {
        return;
    }

    @Override
    public void applyTrait(CharacterModel character) {
        return;
    }

    @Override
    public void traitInterrupt(CharacterModel character, Event event){
        if(event instanceof Damage){
            Damage damage = (Damage) event;
            if(damage.getDamageType().equals(damageResistance) && damage.getDamageType().equals(damageVulnerability)){
                return;
            }else if(damage.getDamageType().equals(damageResistance)){
                BigDecimal amt = new BigDecimal(event.getEffectAmt());
                event.setEffectAmt(amt.divide(new BigDecimal(2), BigDecimal.ROUND_UP).intValue());
            }else if(damage.getDamageType().equals(damageVulnerability)){
                event.setEffectAmt(event.getEffectAmt() * 2);
            }
        }
    }
}
